[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "customkb"
version = "1.0.0"
description = "AI-powered knowledgebase management system"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "CustomKB Team", email = "admin@okusi.id"},
]
keywords = ["ai", "knowledge-base", "embeddings", "llm", "search"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "psutil",
    "anthropic>=0.64.0",
    "beautifulsoup4>=4.13.4",
    "colorlog==6.9.0",
    "faiss-gpu-cu12==1.11.0",
    "langchain_text_splitters==0.3.7",
    "nltk==3.9.1",
    "numpy==2.3.2",
    "openai>=1.67.0",
    "rank-bm25==0.2.2",
    "sentence-transformers>=2.7.0",
    "spacy==3.7.5",
    "tokenizers==0.21.1",
    "langdetect==1.0.9",
    "google-genai>=1.31.0",
    "certifi>=2025.8.3",
    "cryptography>=45.0.6",
    "pandas>=2.0.0",
    "pyyaml>=6.0.1",
    "rapidfuzz>=3.0.0",
    "tqdm>=4.66.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "pylint>=3.0.0",
    "coverage>=7.4.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "freezegun>=1.4.0",
    "faker>=22.0.0",
]

[project.scripts]
customkb = "customkb:main"

[project.urls]
Homepage = "https://github.com/okusi/customkb"
Documentation = "https://docs.okusi.id/customkb"
Repository = "https://github.com/okusi/customkb.git"
Issues = "https://github.com/okusi/customkb/issues"

[tool.setuptools]
packages = ["config", "database", "embedding", "query", "models", "utils", "categorize"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 127
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | \.mailer
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [".venv", ".mailer", "__pycache__"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    ".venv",
    ".mailer",
    "tests",
]

[tool.pylint.messages_control]
max-line-length = 127
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "W0622",  # redefined-builtin
]

[tool.pylint.basic]
good-names = ["i", "j", "k", "e", "f", "id", "kb", "df", "nlp"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "-v",
    "--tb=short",
    "--maxfail=5",
    "--timeout=300",
    "--timeout-method=thread",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=70",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (moderate speed, requires components)",
    "slow: Tests that take more than 5 seconds",
    "requires_api: Tests requiring real API keys",
    "requires_data: Tests requiring external test data",
    "performance: Performance and benchmarking tests",
    "resource_intensive: Tests that use significant memory/CPU",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:spacy*",
    "ignore::FutureWarning:transformers*",
    "ignore::RuntimeWarning:numpy*",
]

[tool.coverage.run]
source = ["."]
omit = [
    ".venv/*",
    ".mailer/*",
    "tests/*",
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/setup.py",
    "run_tests.py",
    "*/migrations/*",
    "*/config/*",
    "*/static/*",
    "*/templates/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "logger\\.debug",
]
precision = 2
skip_covered = false
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"