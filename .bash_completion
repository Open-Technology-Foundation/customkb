#!/bin/bash
# Bash completion for customkb command

_customkb_complete() {
    local cur prev words cword
    _init_completion || return

    # Available commands
    local commands="database embed query edit optimize verify-indexes bm25 categorize version help"
    
    # Available knowledge bases (from VECTORDBS directory)
    local vectordbs_dir="${VECTORDBS:-/var/lib/vectordbs}"
    local knowledge_bases=""
    if [[ -d "$vectordbs_dir" ]]; then
        knowledge_bases=$(find "$vectordbs_dir" -maxdepth 1 -type d -exec basename {} \; | grep -v '^\.' | sort)
    fi
    
    # Available models
    local embed_models="text-embedding-ada-002 text-embedding-3-small text-embedding-3-large gemini-embedding-001"
    local llm_models="gpt-4o gpt-4o-mini claude-3-5-sonnet claude-3-haiku claude-4-0-sonnet claude-4-0-opus gemini-2.0-flash gemini-2.5-pro gemini-2.5-flash grok-4.0 llama3.3 mistral qwen2.5 deepseek-r1"
    
    # Available formats
    local formats="xml json markdown plain"
    
    # Available prompt templates
    local prompt_templates="default instructive scholarly concise analytical conversational technical"
    
    # Available languages
    local languages="en fr de es it pt nl da sv no fi ru ar zh ja ko"

    case $cword in
        1)
            # First argument: command
            COMPREPLY=($(compgen -W "$commands" -- "$cur"))
            return 0
            ;;
        2)
            # Second argument: knowledge base name (for most commands)
            case "$prev" in
                database|embed|query|edit|bm25|verify-indexes|categorize)
                    COMPREPLY=($(compgen -W "$knowledge_bases" -- "$cur"))
                    return 0
                    ;;
                optimize)
                    # optimize can take a knowledge base or no argument
                    COMPREPLY=($(compgen -W "$knowledge_bases" -- "$cur"))
                    return 0
                    ;;
                version|help)
                    # These commands don't take knowledge base names
                    return 0
                    ;;
            esac
            ;;
        *)
            # Handle options for different commands
            local command="${words[1]}"
            case "$command" in
                query)
                    case "$prev" in
                        -m|--model)
                            COMPREPLY=($(compgen -W "$llm_models" -- "$cur"))
                            return 0
                            ;;
                        -f|--format)
                            COMPREPLY=($(compgen -W "$formats" -- "$cur"))
                            return 0
                            ;;
                        -p|--prompt-template)
                            COMPREPLY=($(compgen -W "$prompt_templates" -- "$cur"))
                            return 0
                            ;;
                        -k|--top-k|-s|--context-scope|-t|--temperature|-M|--max-tokens)
                            # These expect numeric values
                            return 0
                            ;;
                        -R|--role|--category|--categories)
                            # These expect string values
                            return 0
                            ;;
                        --context-files)
                            # Complete file paths
                            COMPREPLY=($(compgen -f -- "$cur"))
                            return 0
                            ;;
                        *)
                            # If third argument and no option flag, it's the query text
                            if [[ $cword -eq 3 && "$prev" != -* ]]; then
                                return 0
                            fi
                            # Complete query options
                            COMPREPLY=($(compgen -W "-c --context --context-only -R --role -m --model -k --top-k -s --context-scope -t --temperature -M --max-tokens -f --format -p --prompt-template --category --categories --context-files -q --quiet -v --verbose -d --debug" -- "$cur"))
                            return 0
                            ;;
                    esac
                    ;;
                database)
                    case "$prev" in
                        -l|--language)
                            COMPREPLY=($(compgen -W "$languages" -- "$cur"))
                            return 0
                            ;;
                        *)
                            # If third argument and no option flag, complete file paths
                            if [[ $cword -gt 2 && "$prev" != -* ]]; then
                                COMPREPLY=($(compgen -f -- "$cur"))
                                return 0
                            fi
                            # Complete database options
                            COMPREPLY=($(compgen -W "-l --language --detect-language -f --force -q --quiet -v --verbose -d --debug" -- "$cur"))
                            return 0
                            ;;
                    esac
                    ;;
                embed)
                    COMPREPLY=($(compgen -W "-r --reset-database -q --quiet -v --verbose -d --debug" -- "$cur"))
                    return 0
                    ;;
                edit)
                    COMPREPLY=($(compgen -W "-q --quiet -v --verbose -d --debug" -- "$cur"))
                    return 0
                    ;;
                bm25)
                    COMPREPLY=($(compgen -W "--force" -- "$cur"))
                    return 0
                    ;;
                optimize)
                    case "$prev" in
                        -m|--memory-gb)
                            # Numeric value expected
                            return 0
                            ;;
                        *)
                            COMPREPLY=($(compgen -W "-n --dry-run -a --analyze -s --show-tiers -m --memory-gb -q --quiet -v --verbose -d --debug" -- "$cur"))
                            return 0
                            ;;
                    esac
                    ;;
                verify-indexes)
                    COMPREPLY=($(compgen -W "-q --quiet -v --verbose -d --debug" -- "$cur"))
                    return 0
                    ;;
                categorize)
                    case "$prev" in
                        -S|--sample|-M|--max-concurrent)
                            # Numeric values expected
                            return 0
                            ;;
                        -m|--model)
                            COMPREPLY=($(compgen -W "$llm_models" -- "$cur"))
                            return 0
                            ;;
                        -s|--sampling)
                            # Pattern like "5-10-5"
                            return 0
                            ;;
                        -c|--confidence-threshold|--dedup-threshold)
                            # Float values expected
                            return 0
                            ;;
                        *)
                            COMPREPLY=($(compgen -W "-S --sample -f --full --resume --import --list -m --model -s --sampling -M --max-concurrent -c --confidence-threshold -D --no-dedup --dedup-threshold --fixed-categories -v --verbose -q --quiet -d --debug" -- "$cur"))
                            return 0
                            ;;
                    esac
                    ;;
                version)
                    COMPREPLY=($(compgen -W "--build" -- "$cur"))
                    return 0
                    ;;
                help)
                    # No additional options for help
                    return 0
                    ;;
            esac
            ;;
    esac

    return 0
}

# Register the completion function
complete -F _customkb_complete customkb